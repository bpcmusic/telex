/*
 * TELEXo Eurorack Module
 * (c) 2016 Brendon Cassidy
 * MIT License
 */
 
#include "Arduino.h"
#include "Oscillator.h"

/*
 * Constructor; requires the sampling rate
 */
Oscillator::Oscillator(int samplingRate) {
  _samplingRate = samplingRate;
  _krate = samplingRate / 1000;
  _samplingRateDiv2 = _samplingRate / 2;
}

/*
 * The primary function called once per sample.
 * Every operation counts here; if you can, do math elsewhere.
 */
float Oscillator::Oscillate() {

  // slew frequency?
  if (_portamento) {
    if (_steps-- <= 0){
      _ulstep = _targetUlstep;
      _portamento = false;
    } else {
      _ulstep = _sign ? _ulstep + _delta : _ulstep - _delta;
    }
  }

  // unsigned long automatically wraps
  _actualPhase += _ulstep;

  // reduce this down to meet the tablesize range
  _location = _actualPhase >> REDUCEBITS;
   
  switch(_wave){
    case 0:
    case 1:
    case 2:
      if (_portamento || _morphing){
        // no interpolation or rounding
        _lastValue =  tables[_wave][_location];
      } else {  
        // interpolate using some fixed math magic (and a floating point scaler)
        _lastValue = tables[_wave][_location] + (_actualPhase & PHASEMASK) * _phasescale * (tables[_wave][_location + 1] - tables[_wave][_location]);
      }
      break;
    case 3:
      _lastValue =  _location < _width ? -32767 : 32767;
      break;
    case 4:
      // generate a new number if we have flipped
      if (_actualPhase < _oldPhase)
        _lastValue = random(0, 65536) - 32878.;
      _oldPhase = _actualPhase;
      break;
    default:
      _lastValue =  0;
      break;
  }

  if (_morphing){
    switch(_morphWave){
      case 0:
      case 1:
      case 2:
        _morphValue =  tables[_morphWave][_location];
        break;
      case 3:
        _morphValue =  _location < _width ? -32767 : 32767;
        break;
      case 4:
        if (_actualPhase < _oldPhase)
          _morphValue = random(0, 65536) - 32878.;
        _oldPhase = _actualPhase;
        break;
      default:
        _morphValue =  0;
        break;
    }
    _lastValue = (_lastValue * _invMorph + _morphValue * _morph) / MORPHRANGE;
  }

  switch(_rectify){
    case 0:
      break;
    case -2:
      _lastValue = -abs(_lastValue);
      break;
    case -1:
      _lastValue = _lastValue <= 0 ? _lastValue : 0;
      break;
    case 1:
      _lastValue = _lastValue >= 0 ? _lastValue : 0;
      break;
    case 2:
      _lastValue = abs(_lastValue);
      break;
  }
  
  return _lastValue;
  
}

/*
 * Sets the frequency of the oscillator
 */
void Oscillator::SetFreq(float freq){
  _frequency = freq;
  _portamento = false;
  _ulstep = (int)((freq / _samplingRate) * FULLPHASE);
}

/*
 * Targets the frequency for the oscillator (when portamento is active)
 */
void Oscillator::TargetFreq(float freq){
  _frequency = freq;
  if (_stepsCalculated == 0){
    SetFreq(freq);
  } else {
    _targetUlstep = (int)((freq / _samplingRate) * FULLPHASE);
    if (_targetUlstep > _ulstep){
      _delta = (_targetUlstep - _ulstep) / _stepsCalculated;
      _sign = true;
    } else {
      _delta = (_ulstep - _targetUlstep) / _stepsCalculated;
      _sign = false;
    }
    _steps = _stepsCalculated;
    _portamento = true;
  }
}


/*
 * Sets the freqency via an integer
 */
void Oscillator::SetFrequency(int freq) {
  freq = constrain(freq, 0, _samplingRateDiv2);
  SetFreq(freq);
}

/*
 * Targets the freqency via an integer (when portamento is active)
 */
void Oscillator::TargetFrequency(int freq){
  freq = constrain(freq, 0, _samplingRateDiv2);
  TargetFreq(freq);
}

/*
 * Sets a floating point frequency
 */
void Oscillator::SetFloatFrequency(float freq) {
  freq = constrain(freq, 0, _samplingRateDiv2);
  SetFreq(freq);
}

/*
 * Tarets a floating point frequency (when portamento is active)
 */
void Oscillator::TargetFloatFrequency(float freq){
  freq = constrain(freq, 0, _samplingRateDiv2);
  TargetFreq(freq);
}

/*
 * Sets the LFO in millihertz (10^3 Hz)
 */
void Oscillator::SetLFO(int millihertz) {
  millihertz = constrain(millihertz, 0, 32767);
  SetFreq((float)millihertz / 1000.);
}

/*
 * Tarets the LFO in millihertz (10^3 Hz)
 */
void Oscillator::TargetLFO(int millihertz) {
  millihertz = constrain(millihertz, 0, 32767);
  TargetFreq((float)millihertz / 1000.);
}

/*
 * Sets the width of the pulse wave (0-100)
 */
void Oscillator::SetWidth(int width) {
  width = constrain(width, 0, 100);
  _width = ((float)width / 100.) * (TABLERANGE - 1);
}

/*
 * Sets the rectification mode:
 * -2 - full negative rectification (-(abs)value)
 * -1 - half negative rectification (ignores the positive values)
 *  0 - no rectification
 * +1 - half positive rectification (ignores the negative values)
 * +2 - full positive rectification ((abs)value)
 */
void Oscillator::SetRectify(int mode) {
  _rectify = constrain(mode, -2, 2);
}

/*
 * Sets the waveform for the oscillator (0-4999)
 * Values in between morph
 * 0    - Sine
 * 1000 - Triangle
 * 2000 - Saw
 * 3000 - Square
 * 4000 - S/H Noise
 */
void Oscillator::SetWaveform(int wave) {
  _wave = constrain(wave / MORPHRANGE, 0, WAVEFORMS - 1);
  _morphWave = _wave + 1;
  if (_morphWave >= WAVEFORMS) _morphWave = 0;
  _morph = wave % MORPHRANGE;
  _invMorph = MORPHRANGE - _morph;
  _morphing = _morph != 0;
}

/*
 * Resets the phase of the oscillator to its default
 */
void Oscillator::ResetPhase(long polarity) {
  if (polarity == 0)
    _actualPhase = _phaseOffset << PHASEBITS;
  else
    _actualPhase = (unsigned long)peaks[_wave] << REDUCEBITS;
}

/*
 * Sets the oscillator's phase offset
 */
void Oscillator::SetPhaseOffset(int phase) {
  phase = constrain(phase, 0, 16384);
  _phaseDelta = phase - _phaseOffset;
  _phaseOffset = phase;
  _actualPhase += _phaseDelta << PHASEBITS;
}

/*
 * Sets the time for portamento in milliseconds
 */
void Oscillator::SetPortamentoMs(unsigned long milliseconds){
  _stepsCalculated = milliseconds * _krate;
  if (_portamento && _steps > 0){
      if (_targetUlstep > _ulstep){
        _delta = (_targetUlstep - _ulstep) / _stepsCalculated;
        _sign = true;
      } else {
        _delta = (_ulstep - _targetUlstep) / _stepsCalculated;
        _sign = false;
      }
    _steps = _stepsCalculated;
  }
}

/*
 * Returns the floating point frequency of the oscillator
 */
float Oscillator::GetFrequency(){
  return _frequency;
}

// tables

// sine
int Oscillator::table0[] = {
0x0,0x192,0x324,0x4b6,0x647,0x7d9,0x96a,0xafb,0xc8b,0xe1b,0xfab,0x1139,0x12c7,0x1455,0x15e1,0x176d,
0x18f8,0x1a82,0x1c0b,0x1d93,0x1f19,0x209f,0x2223,0x23a6,0x2527,0x26a7,0x2826,0x29a3,0x2b1e,0x2c98,0x2e10,0x2f86,
0x30fb,0x326d,0x33de,0x354d,0x36b9,0x3824,0x398c,0x3af2,0x3c56,0x3db7,0x3f16,0x4073,0x41cd,0x4325,0x447a,0x45cc,
0x471c,0x4869,0x49b3,0x4afa,0x4c3f,0x4d80,0x4ebf,0x4ffa,0x5133,0x5268,0x539a,0x54c9,0x55f4,0x571d,0x5842,0x5963,
0x5a81,0x5b9c,0x5cb3,0x5dc6,0x5ed6,0x5fe2,0x60eb,0x61f0,0x62f1,0x63ee,0x64e7,0x65dd,0x66ce,0x67bc,0x68a5,0x698b,
0x6a6c,0x6b4a,0x6c23,0x6cf8,0x6dc9,0x6e95,0x6f5e,0x7022,0x70e1,0x719d,0x7254,0x7306,0x73b5,0x745e,0x7503,0x75a4,
0x7640,0x76d8,0x776b,0x77f9,0x7883,0x7908,0x7989,0x7a04,0x7a7c,0x7aee,0x7b5c,0x7bc4,0x7c29,0x7c88,0x7ce2,0x7d38,
0x7d89,0x7dd5,0x7e1c,0x7e5e,0x7e9c,0x7ed4,0x7f08,0x7f37,0x7f61,0x7f86,0x7fa6,0x7fc1,0x7fd7,0x7fe8,0x7ff5,0x7ffc,
0x7fff,0x7ffc,0x7ff5,0x7fe8,0x7fd7,0x7fc1,0x7fa6,0x7f86,0x7f61,0x7f37,0x7f08,0x7ed4,0x7e9c,0x7e5e,0x7e1c,0x7dd5,
0x7d89,0x7d38,0x7ce2,0x7c88,0x7c29,0x7bc4,0x7b5c,0x7aee,0x7a7c,0x7a04,0x7989,0x7908,0x7883,0x77f9,0x776b,0x76d8,
0x7640,0x75a4,0x7503,0x745e,0x73b5,0x7306,0x7254,0x719d,0x70e1,0x7022,0x6f5e,0x6e95,0x6dc9,0x6cf8,0x6c23,0x6b4a,
0x6a6c,0x698b,0x68a5,0x67bc,0x66ce,0x65dd,0x64e7,0x63ee,0x62f1,0x61f0,0x60eb,0x5fe2,0x5ed6,0x5dc6,0x5cb3,0x5b9c,
0x5a81,0x5963,0x5842,0x571d,0x55f4,0x54c9,0x539a,0x5268,0x5133,0x4ffa,0x4ebf,0x4d80,0x4c3f,0x4afa,0x49b3,0x4869,
0x471c,0x45cc,0x447a,0x4325,0x41cd,0x4073,0x3f16,0x3db7,0x3c56,0x3af2,0x398c,0x3824,0x36b9,0x354d,0x33de,0x326d,
0x30fb,0x2f86,0x2e10,0x2c98,0x2b1e,0x29a3,0x2826,0x26a7,0x2527,0x23a6,0x2223,0x209f,0x1f19,0x1d93,0x1c0b,0x1a82,
0x18f8,0x176d,0x15e1,0x1455,0x12c7,0x1139,0xfab,0xe1b,0xc8b,0xafb,0x96a,0x7d9,0x647,0x4b6,0x324,0x192,
0x0,-0x192,-0x324,-0x4b6,-0x647,-0x7d9,-0x96a,-0xafb,-0xc8b,-0xe1b,-0xfab,-0x1139,-0x12c7,-0x1455,-0x15e1,-0x176d,
-0x18f8,-0x1a82,-0x1c0b,-0x1d93,-0x1f19,-0x209f,-0x2223,-0x23a6,-0x2527,-0x26a7,-0x2826,-0x29a3,-0x2b1e,-0x2c98,-0x2e10,-0x2f86,
-0x30fb,-0x326d,-0x33de,-0x354d,-0x36b9,-0x3824,-0x398c,-0x3af2,-0x3c56,-0x3db7,-0x3f16,-0x4073,-0x41cd,-0x4325,-0x447a,-0x45cc,
-0x471c,-0x4869,-0x49b3,-0x4afa,-0x4c3f,-0x4d80,-0x4ebf,-0x4ffa,-0x5133,-0x5268,-0x539a,-0x54c9,-0x55f4,-0x571d,-0x5842,-0x5963,
-0x5a81,-0x5b9c,-0x5cb3,-0x5dc6,-0x5ed6,-0x5fe2,-0x60eb,-0x61f0,-0x62f1,-0x63ee,-0x64e7,-0x65dd,-0x66ce,-0x67bc,-0x68a5,-0x698b,
-0x6a6c,-0x6b4a,-0x6c23,-0x6cf8,-0x6dc9,-0x6e95,-0x6f5e,-0x7022,-0x70e1,-0x719d,-0x7254,-0x7306,-0x73b5,-0x745e,-0x7503,-0x75a4,
-0x7640,-0x76d8,-0x776b,-0x77f9,-0x7883,-0x7908,-0x7989,-0x7a04,-0x7a7c,-0x7aee,-0x7b5c,-0x7bc4,-0x7c29,-0x7c88,-0x7ce2,-0x7d38,
-0x7d89,-0x7dd5,-0x7e1c,-0x7e5e,-0x7e9c,-0x7ed4,-0x7f08,-0x7f37,-0x7f61,-0x7f86,-0x7fa6,-0x7fc1,-0x7fd7,-0x7fe8,-0x7ff5,-0x7ffc,
-0x7fff,-0x7ffc,-0x7ff5,-0x7fe8,-0x7fd7,-0x7fc1,-0x7fa6,-0x7f86,-0x7f61,-0x7f37,-0x7f08,-0x7ed4,-0x7e9c,-0x7e5e,-0x7e1c,-0x7dd5,
-0x7d89,-0x7d38,-0x7ce2,-0x7c88,-0x7c29,-0x7bc4,-0x7b5c,-0x7aee,-0x7a7c,-0x7a04,-0x7989,-0x7908,-0x7883,-0x77f9,-0x776b,-0x76d8,
-0x7640,-0x75a4,-0x7503,-0x745e,-0x73b5,-0x7306,-0x7254,-0x719d,-0x70e1,-0x7022,-0x6f5e,-0x6e95,-0x6dc9,-0x6cf8,-0x6c23,-0x6b4a,
-0x6a6c,-0x698b,-0x68a5,-0x67bc,-0x66ce,-0x65dd,-0x64e7,-0x63ee,-0x62f1,-0x61f0,-0x60eb,-0x5fe2,-0x5ed6,-0x5dc6,-0x5cb3,-0x5b9c,
-0x5a81,-0x5963,-0x5842,-0x571d,-0x55f4,-0x54c9,-0x539a,-0x5268,-0x5133,-0x4ffa,-0x4ebf,-0x4d80,-0x4c3f,-0x4afa,-0x49b3,-0x4869,
-0x471c,-0x45cc,-0x447a,-0x4325,-0x41cd,-0x4073,-0x3f16,-0x3db7,-0x3c56,-0x3af2,-0x398c,-0x3824,-0x36b9,-0x354d,-0x33de,-0x326d,
-0x30fb,-0x2f86,-0x2e10,-0x2c98,-0x2b1e,-0x29a3,-0x2826,-0x26a7,-0x2527,-0x23a6,-0x2223,-0x209f,-0x1f19,-0x1d93,-0x1c0b,-0x1a82,
-0x18f8,-0x176d,-0x15e1,-0x1455,-0x12c7,-0x1139,-0xfab,-0xe1b,-0xc8b,-0xafb,-0x96a,-0x7d9,-0x647,-0x4b6,-0x324,-0x192,
0x0
};

// triangle
int Oscillator::table1[] = {
-0x8000,-0x7f00,-0x7e00,-0x7d00,-0x7c00,-0x7b00,-0x7a00,-0x7900,-0x7800,-0x7700,-0x7600,-0x7500,-0x7400,-0x7300,-0x7200,-0x7100,
-0x7000,-0x6f00,-0x6e00,-0x6d00,-0x6c00,-0x6b00,-0x6a00,-0x6900,-0x6800,-0x6700,-0x6600,-0x6500,-0x6400,-0x6300,-0x6200,-0x6100,
-0x6000,-0x5f00,-0x5e00,-0x5d00,-0x5c00,-0x5b00,-0x5a00,-0x5900,-0x5800,-0x5700,-0x5600,-0x5500,-0x5400,-0x5300,-0x5200,-0x5100,
-0x5000,-0x4f00,-0x4e00,-0x4d00,-0x4c00,-0x4b00,-0x4a00,-0x4900,-0x4800,-0x4700,-0x4600,-0x4500,-0x4400,-0x4300,-0x4200,-0x4100,
-0x4000,-0x3f00,-0x3e00,-0x3d00,-0x3c00,-0x3b00,-0x3a00,-0x3900,-0x3800,-0x3700,-0x3600,-0x3500,-0x3400,-0x3300,-0x3200,-0x3100,
-0x3000,-0x2f00,-0x2e00,-0x2d00,-0x2c00,-0x2b00,-0x2a00,-0x2900,-0x2800,-0x2700,-0x2600,-0x2500,-0x2400,-0x2300,-0x2200,-0x2100,
-0x2000,-0x1f00,-0x1e00,-0x1d00,-0x1c00,-0x1b00,-0x1a00,-0x1900,-0x1800,-0x1700,-0x1600,-0x1500,-0x1400,-0x1300,-0x1200,-0x1100,
-0x1000,-0xf00,-0xe00,-0xd00,-0xc00,-0xb00,-0xa00,-0x900,-0x800,-0x700,-0x600,-0x500,-0x400,-0x300,-0x200,-0x100,
0x0,0xff,0x1ff,0x2ff,0x3ff,0x4ff,0x5ff,0x6ff,0x7ff,0x8ff,0x9ff,0xaff,0xbff,0xcff,0xdff,0xeff,
0xfff,0x10ff,0x11ff,0x12ff,0x13ff,0x14ff,0x15ff,0x16ff,0x17ff,0x18ff,0x19ff,0x1aff,0x1bff,0x1cff,0x1dff,0x1eff,
0x1fff,0x20ff,0x21ff,0x22ff,0x23ff,0x24ff,0x25ff,0x26ff,0x27ff,0x28ff,0x29ff,0x2aff,0x2bff,0x2cff,0x2dff,0x2eff,
0x2fff,0x30ff,0x31ff,0x32ff,0x33ff,0x34ff,0x35ff,0x36ff,0x37ff,0x38ff,0x39ff,0x3aff,0x3bff,0x3cff,0x3dff,0x3eff,
0x3fff,0x40ff,0x41ff,0x42ff,0x43ff,0x44ff,0x45ff,0x46ff,0x47ff,0x48ff,0x49ff,0x4aff,0x4bff,0x4cff,0x4dff,0x4eff,
0x4fff,0x50ff,0x51ff,0x52ff,0x53ff,0x54ff,0x55ff,0x56ff,0x57ff,0x58ff,0x59ff,0x5aff,0x5bff,0x5cff,0x5dff,0x5eff,
0x5fff,0x60ff,0x61ff,0x62ff,0x63ff,0x64ff,0x65ff,0x66ff,0x67ff,0x68ff,0x69ff,0x6aff,0x6bff,0x6cff,0x6dff,0x6eff,
0x6fff,0x70ff,0x71ff,0x72ff,0x73ff,0x74ff,0x75ff,0x76ff,0x77ff,0x78ff,0x79ff,0x7aff,0x7bff,0x7cff,0x7dff,0x7eff,
0x7fff,0x7eff,0x7dff,0x7cff,0x7bff,0x7aff,0x79ff,0x78ff,0x77ff,0x76ff,0x75ff,0x74ff,0x73ff,0x72ff,0x71ff,0x70ff,
0x6fff,0x6eff,0x6dff,0x6cff,0x6bff,0x6aff,0x69ff,0x68ff,0x67ff,0x66ff,0x65ff,0x64ff,0x63ff,0x62ff,0x61ff,0x60ff,
0x5fff,0x5eff,0x5dff,0x5cff,0x5bff,0x5aff,0x59ff,0x58ff,0x57ff,0x56ff,0x55ff,0x54ff,0x53ff,0x52ff,0x51ff,0x50ff,
0x4fff,0x4eff,0x4dff,0x4cff,0x4bff,0x4aff,0x49ff,0x48ff,0x47ff,0x46ff,0x45ff,0x44ff,0x43ff,0x42ff,0x41ff,0x40ff,
0x3fff,0x3eff,0x3dff,0x3cff,0x3bff,0x3aff,0x39ff,0x38ff,0x37ff,0x36ff,0x35ff,0x34ff,0x33ff,0x32ff,0x31ff,0x30ff,
0x2fff,0x2eff,0x2dff,0x2cff,0x2bff,0x2aff,0x29ff,0x28ff,0x27ff,0x26ff,0x25ff,0x24ff,0x23ff,0x22ff,0x21ff,0x20ff,
0x1fff,0x1eff,0x1dff,0x1cff,0x1bff,0x1aff,0x19ff,0x18ff,0x17ff,0x16ff,0x15ff,0x14ff,0x13ff,0x12ff,0x11ff,0x10ff,
0xfff,0xeff,0xdff,0xcff,0xbff,0xaff,0x9ff,0x8ff,0x7ff,0x6ff,0x5ff,0x4ff,0x3ff,0x2ff,0x1ff,0xff,
0x0,-0x100,-0x200,-0x300,-0x400,-0x500,-0x600,-0x700,-0x800,-0x900,-0xa00,-0xb00,-0xc00,-0xd00,-0xe00,-0xf00,
-0x1000,-0x1100,-0x1200,-0x1300,-0x1400,-0x1500,-0x1600,-0x1700,-0x1800,-0x1900,-0x1a00,-0x1b00,-0x1c00,-0x1d00,-0x1e00,-0x1f00,
-0x2000,-0x2100,-0x2200,-0x2300,-0x2400,-0x2500,-0x2600,-0x2700,-0x2800,-0x2900,-0x2a00,-0x2b00,-0x2c00,-0x2d00,-0x2e00,-0x2f00,
-0x3000,-0x3100,-0x3200,-0x3300,-0x3400,-0x3500,-0x3600,-0x3700,-0x3800,-0x3900,-0x3a00,-0x3b00,-0x3c00,-0x3d00,-0x3e00,-0x3f00,
-0x4000,-0x4100,-0x4200,-0x4300,-0x4400,-0x4500,-0x4600,-0x4700,-0x4800,-0x4900,-0x4a00,-0x4b00,-0x4c00,-0x4d00,-0x4e00,-0x4f00,
-0x5000,-0x5100,-0x5200,-0x5300,-0x5400,-0x5500,-0x5600,-0x5700,-0x5800,-0x5900,-0x5a00,-0x5b00,-0x5c00,-0x5d00,-0x5e00,-0x5f00,
-0x6000,-0x6100,-0x6200,-0x6300,-0x6400,-0x6500,-0x6600,-0x6700,-0x6800,-0x6900,-0x6a00,-0x6b00,-0x6c00,-0x6d00,-0x6e00,-0x6f00,
-0x7000,-0x7100,-0x7200,-0x7300,-0x7400,-0x7500,-0x7600,-0x7700,-0x7800,-0x7900,-0x7a00,-0x7b00,-0x7c00,-0x7d00,-0x7e00,-0x7f00,
-0x8000
};

// saw
int Oscillator::table2[] = {
-0x8000,-0x7f80,-0x7f00,-0x7e80,-0x7e00,-0x7d80,-0x7d00,-0x7c80,-0x7c00,-0x7b80,-0x7b00,-0x7a80,-0x7a00,-0x7980,-0x7900,-0x7880,
-0x7800,-0x7780,-0x7700,-0x7680,-0x7600,-0x7580,-0x7500,-0x7480,-0x7400,-0x7380,-0x7300,-0x7280,-0x7200,-0x7180,-0x7100,-0x7080,
-0x7000,-0x6f80,-0x6f00,-0x6e80,-0x6e00,-0x6d80,-0x6d00,-0x6c80,-0x6c00,-0x6b80,-0x6b00,-0x6a80,-0x6a00,-0x6980,-0x6900,-0x6880,
-0x6800,-0x6780,-0x6700,-0x6680,-0x6600,-0x6580,-0x6500,-0x6480,-0x6400,-0x6380,-0x6300,-0x6280,-0x6200,-0x6180,-0x6100,-0x6080,
-0x6000,-0x5f80,-0x5f00,-0x5e80,-0x5e00,-0x5d80,-0x5d00,-0x5c80,-0x5c00,-0x5b80,-0x5b00,-0x5a80,-0x5a00,-0x5980,-0x5900,-0x5880,
-0x5800,-0x5780,-0x5700,-0x5680,-0x5600,-0x5580,-0x5500,-0x5480,-0x5400,-0x5380,-0x5300,-0x5280,-0x5200,-0x5180,-0x5100,-0x5080,
-0x5000,-0x4f80,-0x4f00,-0x4e80,-0x4e00,-0x4d80,-0x4d00,-0x4c80,-0x4c00,-0x4b80,-0x4b00,-0x4a80,-0x4a00,-0x4980,-0x4900,-0x4880,
-0x4800,-0x4780,-0x4700,-0x4680,-0x4600,-0x4580,-0x4500,-0x4480,-0x4400,-0x4380,-0x4300,-0x4280,-0x4200,-0x4180,-0x4100,-0x4080,
-0x4000,-0x3f80,-0x3f00,-0x3e80,-0x3e00,-0x3d80,-0x3d00,-0x3c80,-0x3c00,-0x3b80,-0x3b00,-0x3a80,-0x3a00,-0x3980,-0x3900,-0x3880,
-0x3800,-0x3780,-0x3700,-0x3680,-0x3600,-0x3580,-0x3500,-0x3480,-0x3400,-0x3380,-0x3300,-0x3280,-0x3200,-0x3180,-0x3100,-0x3080,
-0x3000,-0x2f80,-0x2f00,-0x2e80,-0x2e00,-0x2d80,-0x2d00,-0x2c80,-0x2c00,-0x2b80,-0x2b00,-0x2a80,-0x2a00,-0x2980,-0x2900,-0x2880,
-0x2800,-0x2780,-0x2700,-0x2680,-0x2600,-0x2580,-0x2500,-0x2480,-0x2400,-0x2380,-0x2300,-0x2280,-0x2200,-0x2180,-0x2100,-0x2080,
-0x2000,-0x1f80,-0x1f00,-0x1e80,-0x1e00,-0x1d80,-0x1d00,-0x1c80,-0x1c00,-0x1b80,-0x1b00,-0x1a80,-0x1a00,-0x1980,-0x1900,-0x1880,
-0x1800,-0x1780,-0x1700,-0x1680,-0x1600,-0x1580,-0x1500,-0x1480,-0x1400,-0x1380,-0x1300,-0x1280,-0x1200,-0x1180,-0x1100,-0x1080,
-0x1000,-0xf80,-0xf00,-0xe80,-0xe00,-0xd80,-0xd00,-0xc80,-0xc00,-0xb80,-0xb00,-0xa80,-0xa00,-0x980,-0x900,-0x880,
-0x800,-0x780,-0x700,-0x680,-0x600,-0x580,-0x500,-0x480,-0x400,-0x380,-0x300,-0x280,-0x200,-0x180,-0x100,-0x80,
0x0,0x7f,0xff,0x17f,0x1ff,0x27f,0x2ff,0x37f,0x3ff,0x47f,0x4ff,0x57f,0x5ff,0x67f,0x6ff,0x77f,
0x7ff,0x87f,0x8ff,0x97f,0x9ff,0xa7f,0xaff,0xb7f,0xbff,0xc7f,0xcff,0xd7f,0xdff,0xe7f,0xeff,0xf7f,
0xfff,0x107f,0x10ff,0x117f,0x11ff,0x127f,0x12ff,0x137f,0x13ff,0x147f,0x14ff,0x157f,0x15ff,0x167f,0x16ff,0x177f,
0x17ff,0x187f,0x18ff,0x197f,0x19ff,0x1a7f,0x1aff,0x1b7f,0x1bff,0x1c7f,0x1cff,0x1d7f,0x1dff,0x1e7f,0x1eff,0x1f7f,
0x1fff,0x207f,0x20ff,0x217f,0x21ff,0x227f,0x22ff,0x237f,0x23ff,0x247f,0x24ff,0x257f,0x25ff,0x267f,0x26ff,0x277f,
0x27ff,0x287f,0x28ff,0x297f,0x29ff,0x2a7f,0x2aff,0x2b7f,0x2bff,0x2c7f,0x2cff,0x2d7f,0x2dff,0x2e7f,0x2eff,0x2f7f,
0x2fff,0x307f,0x30ff,0x317f,0x31ff,0x327f,0x32ff,0x337f,0x33ff,0x347f,0x34ff,0x357f,0x35ff,0x367f,0x36ff,0x377f,
0x37ff,0x387f,0x38ff,0x397f,0x39ff,0x3a7f,0x3aff,0x3b7f,0x3bff,0x3c7f,0x3cff,0x3d7f,0x3dff,0x3e7f,0x3eff,0x3f7f,
0x3fff,0x407f,0x40ff,0x417f,0x41ff,0x427f,0x42ff,0x437f,0x43ff,0x447f,0x44ff,0x457f,0x45ff,0x467f,0x46ff,0x477f,
0x47ff,0x487f,0x48ff,0x497f,0x49ff,0x4a7f,0x4aff,0x4b7f,0x4bff,0x4c7f,0x4cff,0x4d7f,0x4dff,0x4e7f,0x4eff,0x4f7f,
0x4fff,0x507f,0x50ff,0x517f,0x51ff,0x527f,0x52ff,0x537f,0x53ff,0x547f,0x54ff,0x557f,0x55ff,0x567f,0x56ff,0x577f,
0x57ff,0x587f,0x58ff,0x597f,0x59ff,0x5a7f,0x5aff,0x5b7f,0x5bff,0x5c7f,0x5cff,0x5d7f,0x5dff,0x5e7f,0x5eff,0x5f7f,
0x5fff,0x607f,0x60ff,0x617f,0x61ff,0x627f,0x62ff,0x637f,0x63ff,0x647f,0x64ff,0x657f,0x65ff,0x667f,0x66ff,0x677f,
0x67ff,0x687f,0x68ff,0x697f,0x69ff,0x6a7f,0x6aff,0x6b7f,0x6bff,0x6c7f,0x6cff,0x6d7f,0x6dff,0x6e7f,0x6eff,0x6f7f,
0x6fff,0x707f,0x70ff,0x717f,0x71ff,0x727f,0x72ff,0x737f,0x73ff,0x747f,0x74ff,0x757f,0x75ff,0x767f,0x76ff,0x777f,
0x77ff,0x787f,0x78ff,0x797f,0x79ff,0x7a7f,0x7aff,0x7b7f,0x7bff,0x7c7f,0x7cff,0x7d7f,0x7dff,0x7e7f,0x7eff,0x7f7f,
-0x8000
};


int *Oscillator::tables[] = { table0, table1, table2 };

int Oscillator::peaks[] = { 128, 256, 0, 0, 0 };
